#!/usr/bin/env python3
import mimetypes
import os.path
import reports
import emails
import json
import locale
import sys


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


popular_car={}
def process_data(data):
  """Analyzes the data, looking for maximums.
  max_sales = {"total_sales": 0}
  Returns a list of lines that summarize the information.
  """
  max_sales = {"total_sales": 0}
  
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item["total_sales"] > max_sales["total_sales"]:
      max_sales = item
    # TODO: also handle most popular car_year
    if not item['car']['car_year'] in popular_car.keys():
      popular_car[item["car"]["car_year"]] = item['total_sales']
    else:
      popular_car[item['car']['car_year']] += item['total_sales']
    all_values = popular_car.values()
    max_value = max(all_values)
    max_key = max(popular_car, key=popular_car.get)
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
  ]
  summary.append("The {} had the most sales: {}".format(max_sales['car']['car_model'],max_sales['total_sales']))
  summary.append("The most popular year was {} with {} sales.".format(max_key,max_value))
  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  paragraph = "<br/>".join(summary)
  table_data = cars_dict_to_table(data)
  # TODO: send the PDF report as an email attachment
  title = "Sales summary for last month"
  attachment = "/tmp/cars.pdf"
  
  reports.generate(attachment, title, paragraph, table_data)
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  body = "\n".join(summary)
  message = emails.generate(sender, receiver, title, body, attachment)
  emails.send(message)


if __name__ == "__main__":
  main(sys.argv)
